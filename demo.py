"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AI Stock Portfolio Optimizer
–ê–≤—Ç–æ—Ä: –ú–µ–∫–µ–¥–∞ –ë–æ–≥–¥–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á
"""

import sys
import os
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from data_collector import DataCollector
from fundamental_analyzer import FundamentalAnalyzer
from ml_predictor import MLPredictor
from portfolio_optimizer import PortfolioOptimizer

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("ü§ñ AI Stock Portfolio Optimizer - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    tickers = ["AAPL", "GOOGL", "MSFT", "AMZN", "TSLA"]
    period = "1y"
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –∞–∫—Ü–∏–∏: {', '.join(tickers)}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {period}")
    print()
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    collector = DataCollector(tickers, period)
    
    try:
        historical_data, fundamental_data = collector.fetch_all_data()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(historical_data)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö, {len(fundamental_data)} —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    if len(historical_data) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # 2. –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n2Ô∏è‚É£ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    analyzer = FundamentalAnalyzer()
    
    try:
        analysis_results = analyzer.analyze_portfolio(fundamental_data)
        
        if not analysis_results.empty:
            print("‚úÖ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
            print("\nüèÜ –¢–æ–ø-3 –∞–∫—Ü–∏–∏ –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º—É —Å–∫–æ—Ä—É:")
            
            for i, (_, row) in enumerate(analysis_results.head(3).iterrows()):
                print(f"   {i+1}. {row['ticker']}: {row['total_score']:.1f}/10 ({row['rating']})")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    # 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
    print("\n3Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
    optimizer = PortfolioOptimizer()
    
    try:
        returns_df = optimizer.calculate_returns(historical_data)
        print(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –¥–ª—è {len(returns_df.columns)} –∞–∫—Ü–∏–π")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        optimal_result = optimizer.optimize_portfolio("max_sharpe")
        
        if optimal_result.get('optimization_success', False):
            print("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
            print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {optimal_result['expected_return']:.1%}")
            print(f"   ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {optimal_result['volatility']:.1%}")
            print(f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {optimal_result['sharpe_ratio']:.2f}")
            
            print(f"\nüíº –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
            weights = optimal_result['weights']
            for ticker, weight in sorted(weights.items(), key=lambda x: x[1], reverse=True):
                if weight > 0.01:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ—Å–∞ –±–æ–ª—å—à–µ 1%
                    print(f"   ‚Ä¢ {ticker}: {weight:.1%}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    # 4. ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    print("\n4Ô∏è‚É£ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ...")
    try:
        predictor = MLPredictor(sequence_length=30, prediction_days=7)  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ–º–æ
        
        # –í—ã–±–µ—Ä–µ–º –æ–¥–Ω—É –∞–∫—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_ticker = list(historical_data.keys())[0]
        demo_data = historical_data[demo_ticker]
        
        print(f"üîÆ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {demo_ticker}...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X, y = predictor.prepare_data(demo_data)
        
        if X.size > 0 and y.size > 0:
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            metrics = predictor.train_model(X, y)
            
            if metrics:
                print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ (MAPE: {metrics['mape']:.1f}%)")
                
                # –ü—Ä–æ–≥–Ω–æ–∑
                prediction_result = predictor.predict_prices(demo_data)
                
                if prediction_result:
                    current_price = prediction_result['current_price']
                    predicted_price = prediction_result['predictions'][-1]
                    expected_return = prediction_result['predicted_return']
                    
                    print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {demo_ticker}:")
                    print(f"   ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
                    print(f"   ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã (7 –¥–Ω–µ–π): ${predicted_price:.2f}")
                    print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {expected_return:.1%}")
                else:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
        else:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML –º–æ–¥–µ–ª–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # 5. –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    print("\n5Ô∏è‚É£ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    try:
        if 'optimal_result' in locals() and optimal_result.get('optimization_success', False):
            from datetime import datetime, timedelta
            
            # –ë—ç–∫—Ç–µ—Å—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
            end_date = datetime.now()
            start_date = end_date - timedelta(days=180)
            
            backtest_results = optimizer.backtest_strategy(
                start_date.strftime("%Y-%m-%d"),
                end_date.strftime("%Y-%m-%d")
            )
            
            if backtest_results:
                print("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤:")
                print(f"   ‚Ä¢ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {backtest_results['total_return']:.1%}")
                print(f"   ‚Ä¢ –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {backtest_results['annual_return']:.1%}")
                print(f"   ‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {backtest_results['sharpe_ratio']:.2f}")
                print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {backtest_results['max_drawdown']:.1%}")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ - –Ω–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–µ: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: streamlit run app.py")
    print("‚ö†Ô∏è  –ü–æ–º–Ω–∏—Ç–µ: —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!")

if __name__ == "__main__":
    main()